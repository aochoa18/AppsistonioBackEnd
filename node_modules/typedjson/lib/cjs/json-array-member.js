"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createArrayType = exports.jsonArrayMember = void 0;
var helpers_1 = require("./helpers");
var metadata_1 = require("./metadata");
var options_base_1 = require("./options-base");
var type_descriptor_1 = require("./type-descriptor");
function jsonArrayMember(elementConstructor, options) {
    if (options === void 0) { options = {}; }
    return function (target, propKey) {
        var _a;
        var decoratorName = "@jsonArrayMember on " + helpers_1.nameof(target.constructor) + "." + String(propKey);
        if (!type_descriptor_1.isTypelike(elementConstructor)) {
            helpers_1.logError(decoratorName + ": could not resolve constructor of array elements at runtime.");
            return;
        }
        var dimensions = options.dimensions == null ? 1 : options.dimensions;
        if (!isNaN(dimensions) && dimensions < 1) {
            helpers_1.logError(decoratorName + ": 'dimensions' option must be at least 1.");
            return;
        }
        if (helpers_1.isReflectMetadataSupported
            && Reflect.getMetadata('design:type', target, propKey) !== Array) {
            helpers_1.logError(decoratorName + ": property is not an Array. " + helpers_1.MISSING_REFLECT_CONF_MSG);
            return;
        }
        metadata_1.injectMetadataInformation(target, propKey, {
            type: createArrayType(type_descriptor_1.ensureTypeDescriptor(elementConstructor), dimensions),
            emitDefaultValue: options.emitDefaultValue,
            isRequired: options.isRequired,
            options: options_base_1.extractOptionBase(options),
            key: propKey.toString(),
            name: (_a = options.name) !== null && _a !== void 0 ? _a : propKey.toString(),
            deserializer: options.deserializer,
            serializer: options.serializer,
        });
    };
}
exports.jsonArrayMember = jsonArrayMember;
function createArrayType(elementType, dimensions) {
    var type = new type_descriptor_1.ArrayTypeDescriptor(elementType);
    for (var i = 1; i < dimensions; ++i) {
        type = new type_descriptor_1.ArrayTypeDescriptor(type);
    }
    return type;
}
exports.createArrayType = createArrayType;
//# sourceMappingURL=json-array-member.js.map